{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n\nfunction BotsPage() {\n  _s();\n\n  //start here with your code for step one\n  const [bots, setBots] = useState([]);\n  const [army, setArmy] = useState([]); // Fetch bots data from backend\n\n  useEffect(() => {\n    const fetchBots = async () => {\n      try {\n        const response = await fetch('http://localhost:8002/bots');\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch bots');\n        }\n\n        const data = await response.json();\n        setBots(data);\n      } catch (error) {\n        console.error('Error fetching bots:', error);\n      }\n    };\n\n    fetchBots();\n  }, []); // Function to add a bot to the army\n\n  function addToArmy(bot) {\n    if (!army.some(b => b.id === bot.id)) {\n      setArmy([...army, bot]);\n    }\n  }\n\n  ; // Function to remove a bot from the army\n\n  function dischargeFromArmy(botId) {\n    // send fetch request to discharge bot \n    fetch(`http://localhost:8002/bots/${botId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.ok) {\n        // If the request is successful, call the onRemoveBot function\n        onRemove(botId);\n      } else {\n        throw new Error(\"Failed to remove bot\");\n      }\n    }).catch(error => {\n      console.error(\"Error removing bot:\", error);\n    });\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(YourBotArmy, {\n      army: army,\n      onAddToArmy: addToArmy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotCollection, {\n      bot: bots,\n      onDischarge: dischargeFromArmy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BotsPage, \"1PT3q9R8TyBH1/4PwVCCfyI4cok=\");\n\n_c = BotsPage;\nexport default BotsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"BotsPage\");","map":{"version":3,"sources":["/home/alistairs/Development/CodeAssignments/Phase-2/code-challenges/Challenge-2-Bot-Battlr-021023/Challenge-2-Bot-Battlr/code-challenge/src/components/BotsPage.js"],"names":["React","useState","useEffect","YourBotArmy","BotCollection","BotsPage","bots","setBots","army","setArmy","fetchBots","response","fetch","ok","Error","data","json","error","console","addToArmy","bot","some","b","id","dischargeFromArmy","botId","method","headers","then","onRemove","catch"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB;AACA,QAAM,CAACC,IAAD,EAAQC,OAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAQC,OAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC,CAHkB,CAMlB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAAD,CAA5B;;AACA,YAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AAChB,gBAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,cAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAT,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,OAPD,CAOE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACD;AACF,KAXD;;AAaAP,IAAAA,SAAS;AACV,GAfQ,EAeN,EAfM,CAAT,CAPkB,CAwBlB;;AACA,WAASS,SAAT,CAAqBC,GAArB,EAA0B;AACxB,QAAI,CAACZ,IAAI,CAACa,IAAL,CAAUC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASH,GAAG,CAACG,EAA5B,CAAL,EAAsC;AACpCd,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUY,GAAV,CAAD,CAAP;AACD;AACF;;AAAA,GA7BiB,CA+BlB;;AACA,WAASI,iBAAT,CAA6BC,KAA7B,EAAoC;AAClC;AACAb,IAAAA,KAAK,CAAE,8BAA6Ba,KAAM,EAArC,EAAwC;AAC3CC,MAAAA,MAAM,EAAE,QADmC;AAE3CC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFkC,KAAxC,CAAL,CAMGC,IANH,CAMSjB,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACE,EAAb,EAAiB;AACf;AACAgB,QAAAA,QAAQ,CAACJ,KAAD,CAAR;AACD,OAHD,MAGO;AACL,cAAM,IAAIX,KAAJ,CAAU,sBAAV,CAAN;AACD;AACF,KAbH,EAcGgB,KAdH,CAcUb,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACD,KAhBH;AAiBD;;AAAA;AACD,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAET,IAAnB;AAAyB,MAAA,WAAW,EAAEW;AAAtC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,GAAG,EAAEb,IAApB;AAA0B,MAAA,WAAW,EAAEkB;AAAvC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA1DQnB,Q;;KAAAA,Q;AA4DT,eAAeA,QAAf","sourcesContent":["import React,{ useState, useEffect } from \"react\";\nimport YourBotArmy from \"./YourBotArmy\";\nimport BotCollection from \"./BotCollection\";\n\nfunction BotsPage() {\n  //start here with your code for step one\n  const [bots , setBots ] = useState([]);\n  const [army , setArmy ] = useState([]);\n\n  \n  // Fetch bots data from backend\n  useEffect(() => {\n    const fetchBots = async () => {\n      try {\n        const response = await fetch('http://localhost:8002/bots');\n        if (!response.ok) {\n          throw new Error('Failed to fetch bots');\n        }\n        const data = await response.json();\n        setBots(data);\n      } catch (error) {\n        console.error('Error fetching bots:', error);\n      }\n    };\n\n    fetchBots();\n  }, []);\n\n  // Function to add a bot to the army\n  function addToArmy  (bot) {\n    if (!army.some(b => b.id === bot.id)) {\n      setArmy([...army, bot]);\n    }\n  };\n\n  // Function to remove a bot from the army\n  function dischargeFromArmy  (botId) {\n    // send fetch request to discharge bot \n    fetch(`http://localhost:8002/bots/${botId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        if (response.ok) {\n          // If the request is successful, call the onRemoveBot function\n          onRemove(botId);\n        } else {\n          throw new Error(\"Failed to remove bot\");\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error removing bot:\", error);\n      });\n  };\n  return (\n    <div>\n      <YourBotArmy army={army} onAddToArmy={addToArmy} />\n      <BotCollection bot={bots} onDischarge={dischargeFromArmy} />\n    </div>\n  )\n}\n\nexport default BotsPage;\n"]},"metadata":{},"sourceType":"module"}